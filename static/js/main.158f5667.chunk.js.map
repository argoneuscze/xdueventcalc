{"version":3,"sources":["data/events.js","util/eventUtils.js","components/ResultsTable.js","components/EventCalculator.js","App.js","serviceWorker.js","index.js"],"names":["name","quests","epCost","avgPoints","getAllEventIds","Object","keys","eventList","getEventData","evtId","ResultsTable","data","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","calcPoints","efficiency","EventCalculator","useState","event","setEvent","bonus","setBonus","results","setResults","eventSelectItems","id","MenuItem","value","Select","onChange","e","target","TextField","type","label","Button","variant","onClick","qst","quest","maxPoints","Math","max","forEach","updateEfficiency","sort","a","b","calculateResults","length","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.158f5667.chunk.js","sourcesContent":["export default {\r\n  \"xdu-global-aot\": {\r\n    name: \"Attack on Titan (Global)\",\r\n    quests: [\r\n      {\r\n        name: \"EV1-2\",\r\n        epCost: 12,\r\n        avgPoints: 87\r\n      },\r\n      {\r\n        name: \"EV1-4\",\r\n        epCost: 14,\r\n        avgPoints: 155\r\n      },\r\n      {\r\n        name: \"EV1-6\",\r\n        epCost: 15,\r\n        avgPoints: 210\r\n      },\r\n      {\r\n        name: \"EV1-7\",\r\n        epCost: 15,\r\n        avgPoints: 215\r\n      }\r\n    ]\r\n  }\r\n};\r\n","import eventList from \"../data/events\";\r\n\r\nexport const getAllEventIds = () => {\r\n  return Object.keys(eventList);\r\n};\r\n\r\nexport const getEventData = evtId => {\r\n  return eventList[evtId];\r\n};\r\n\r\nexport const calculateResults = (event, bonus) => {\r\n  const calculatePoints = quest => {\r\n    return (quest.avgPoints + 3 * bonus) / quest.epCost;\r\n  };\r\n\r\n  const updateEfficiency = results => {\r\n    const maxPoints = Math.max(...results.map(qst => qst.calcPoints));\r\n    results.forEach(qst => {\r\n      qst.efficiency = (qst.calcPoints * 100) / maxPoints;\r\n    });\r\n  };\r\n\r\n  const results = event.quests.map(qst => ({\r\n    name: qst.name,\r\n    epCost: qst.epCost,\r\n    avgPoints: qst.avgPoints,\r\n    calcPoints: calculatePoints(qst),\r\n    efficiency: 0\r\n  }));\r\n\r\n  updateEfficiency(results);\r\n\r\n  // TODO sort it in the table itself\r\n  const sortedResults = results.sort((a, b) => b.efficiency - a.efficiency)\r\n\r\n  return sortedResults\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Table,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  Paper\r\n} from \"@material-ui/core\";\r\n\r\nconst ResultsTable = ({ data }) => {\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Quest</TableCell>\r\n            <TableCell align=\"right\">EP Cost</TableCell>\r\n            <TableCell align=\"right\">Average Points</TableCell>\r\n            <TableCell align=\"right\">Calculated Points per EP</TableCell>\r\n            <TableCell align=\"right\">Efficiency</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map(row => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.epCost}</TableCell>\r\n              <TableCell align=\"right\">{row.avgPoints}</TableCell>\r\n              <TableCell align=\"right\">{row.calcPoints}</TableCell>\r\n              <TableCell align=\"right\">{row.efficiency}%</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default ResultsTable;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  getAllEventIds,\r\n  getEventData,\r\n  calculateResults\r\n} from \"../util/eventUtils\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button, MenuItem, Select } from \"@material-ui/core\";\r\nimport ResultsTable from \"./ResultsTable\";\r\n\r\nconst EventCalculator = () => {\r\n  const [event, setEvent] = useState(getAllEventIds()[0]);\r\n  const [bonus, setBonus] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n\r\n  const handleBonusChange = e => {\r\n    const value = e.target.value;\r\n    if (!(value < 0)) setBonus(value);\r\n  };\r\n\r\n  const handleEventChange = e => {\r\n    setEvent(e.target.value);\r\n  };\r\n\r\n  const handleCalculate = () => {\r\n    const data = getEventData(event);\r\n    setResults(calculateResults(data, bonus));\r\n  };\r\n\r\n  const eventSelectItems = getAllEventIds().map(id => {\r\n    const event = getEventData(id);\r\n    return (\r\n      <MenuItem value={id} key={id}>\r\n        {event.name}\r\n      </MenuItem>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <form>\r\n        <Select id=\"event-select\" value={event} onChange={handleEventChange}>\r\n          {eventSelectItems}\r\n        </Select>\r\n        <br />\r\n        <TextField\r\n          id=\"bonus\"\r\n          type=\"number\"\r\n          label=\"Your Bonus\"\r\n          value={bonus}\r\n          onChange={handleBonusChange}\r\n        />\r\n        <Button variant=\"outlined\" onClick={handleCalculate}>\r\n          Calculate\r\n        </Button>\r\n      </form>\r\n      {results.length > 0 && <ResultsTable data={results} />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EventCalculator;\r\n","import React from \"react\";\nimport EventCalculator from \"./components/EventCalculator\";\nimport { Container } from \"@material-ui/core\";\n\nconst App = () => {\n  return (\n    <Container>\n      <h1>XDU Event Calculator</h1>\n      <EventCalculator />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}